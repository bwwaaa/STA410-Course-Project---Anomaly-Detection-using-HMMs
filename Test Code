# test
for _ in range(100):
    # set up the simulation
    WORK_TIME = 40
    env = sp.Environment()
    system = System(env, USERS, WORK_TIME)

    env.run() # runs the simulation
    all_events = NORMAL_EVENTS + ABNORMAL_EVENTS

    encoder = LabelEncoder()
    encoder.fit(all_events)

    user_sequences = defaultdict(list)

    for timestamp, raw_event in system.log:
        parts = raw_event.split(" ", 2)
        if len(parts) == 3:
            _, user, event = parts
            if event in all_events:
                user_sequences[user].append(event)

# want to train HMM on only normal sequences

    normal_user_sequences = {
          user: [event for event in seq if event in NORMAL_EVENTS] for user, seq in user_sequences.items()}
      

    encoded_normal_sequences = {
          user: encoder.transform(seq) for user, seq in normal_user_sequences.items()}
      

# train HMM on the normal sequences

    X = np.concatenate([np.array(seq).reshape(-1, 1) for seq in encoded_normal_sequences.values()])

    scaler = StandardScaler()
    X_normalized = scaler.fit_transform(X)

    lengths = [len(seq) for seq in encoded_normal_sequences.values()]
    total_samples = sum(lengths)

    model = GaussianHMM(n_components=5)  
    model.fit(X_normalized, lengths=lengths)


    all_encoded_sequences = {
    user: encoder.transform(seq) for user, seq in user_sequences.items()}

    all_X = np.concatenate([np.array(seq).reshape(-1, 1) for seq in all_encoded_sequences.values()])
    all_X_normalized = scaler.transform(all_X)

# score users using log-likelihood, a higher (less negative) score means the user behaviour looks normal, and much lower (very negative) score means it is abnormal

    user_scores = {}
    index = 0
    for user, seq in all_encoded_sequences.items():
        seq_normalized = all_X_normalized[index:index+len(seq)].reshape(-1, 1) 
        user_scores[user] = model.score(seq_normalized)  
        index += len(seq)

    scores = list(user_scores.values())
    mean = statistics.mean(scores)
    std = statistics.stdev(scores)

    for user, score in user_scores.items():
        z = (score - mean) / std
